# Вася совсем заскучал на работе и решил побаловаться с кодом проекта. Он написал надоедливый декоратор, который при вызове
# декорируемой функции спрашивает у пользователя «Как дела?», вне зависимости от ответа пишет что-то вроде «А у меня не очень!»
# и только потом запускает саму функцию. Правда, после такой выходки Васю чуть не уволили с работы.
#
# Реализуйте такой же декоратор и проверьте его работу на нескольких функциях.
#
# Пример кода:
# @how_are_you
# def test():
#     print('<Тут что-то происходит...>')
#
# test()
#
# Результат:
# Как дела? Хорошо.
# А у меня не очень! Ладно, держи свою функцию.
# <Тут что-то происходит...>

from typing import Callable, Any
import functools


def how_are_you(func: Callable) -> Callable:
    """
        Вывод сообщение "Как дела? " в консоль

    Args:
        func (Callable): Декорируемая функция

    Returns:
        Callable: Декоратор
    """    
    @functools.wraps(func)
    def wrapper_fun(*args, **kwargs) -> Any:
        input('Как дела? ')
        print('А у меня не очень! Ладно, держи свою функцию.')
        return func(*args, **kwargs)

    return wrapper_fun


@how_are_you
def test_no_args() -> None:
    """
        Тестовая функция без аргументов, выводящая сообщение в консоль о своем выполнении
    """    
    print('Выполнение 1 тест функции без аргументов')


@how_are_you
def test_limit_args(num1: int, num2: int) -> None:
    """
        Тестовая функция, суммирующая два числа и выводящая результат в консоль

    Args:
        num1 (int): 1 число для суммы
        num2 (int): 2 число для суммы
    """    
    print('Выполнение 2 тест функции c ограниченным числом аргументов')
    print(f'Сумма чисел: {num1 + num2}')


@how_are_you
def test_no_limit_args(*nums) -> None:
    """
        Тестовая функция, суммирующая все переданные числа и выводящая результат в консоль
    """    
    print('Выполнение 3 тест функции c неограниченным числом аргументов')
    print(f'Сумма чисел: {sum(nums)}')


@how_are_you
def test_return_any(*args) -> Any:
    """
        Тестовая функция
    Returns:
        Any: переданные значения
    """    
    print('Выполнение 4 тест функции, возращающие значение')
    return args


test_no_args()
test_limit_args(2, 2)
test_no_limit_args(1, 1, 1, 1)
print(test_return_any(1, 2, 'string', 1.2))
